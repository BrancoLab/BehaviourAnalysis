import sys
sys.path.append('./')  

import datajoint as dj
from dj_config import start_connection
dbname = start_connection()
schema = dj.schema(dbname, locals())

import pandas as pd

@schema
class Mice(dj.Manual):
    definition = """
      # Mouse table lists all the mice used and the relevant attributes
      mouse_id: varchar(128)                        # unique mouse id
      ---
      strain:   varchar(128)                        # genetic strain
      dob: varchar(128)                             # mouse date of birth 
      sex: enum('M', 'F', 'U')                      # sex of mouse - Male, Female, or Unknown/Unclassified
      single_housed: enum('Y', 'N')                 # single housed or group caged
      enriched_cage: enum('Y', 'N')                 # presence of wheel or other stuff in the cage
      """

@schema
class Experiments(dj.Manual):
    definition = """
    # Name of the experiments and location of components templates
    experiment_name: varchar(128)
    ---
    templates_folder: varchar(256)
    """

@schema
class Sessions(dj.Manual):
    definition = """
    # A session is one behavioural experiment performed on one mouse on one day
    uid: smallint     # unique number that defines each session
    session_name: varchar(128)  # unique name that defines each session - YYMMDD_MOUSEID
    ---
    -> Mice
    date: date             # date in the YYYY-MM-DD format
    experiment_name: varchar(128)  # name of the experiment the session is part of 
    -> Experiments      # name of the person performing the experiment
    """

@schema
class Recordings(dj.Manual):
    definition = """
    # Within one session one may perform several recordings. Each recording has its own video and metadata files
    recording_uid: varchar(128)   # uniquely identifying name for each recording YYMMDD_MOUSEID_RECNUM
    ---
    -> Sessions
    rec_num: smallint       # recording number within that session
    video_file_path: varchar(128) # path to the file storing the video data
    video_format: enum('tdms', 'avi', 'mp4')  # format in which the video was recorded
    converted_video_file_path: varchar(128)  # if video was recorded in.tdms and converted to video,where is the video stored
    metadata_file_path: varchar(128) # path to the .tdms file storing the metadata
    pose_data: varchar(128)   # path to .h5 data file generated by dlc
    """

@schema
class Templates(dj.Imported):
    definition = """
    # stores the position of each maze template for one experiment
    -> Recordings
    ---
    s: longblob  # Shelter platform template position
    t: longblob  # Threat platform
    p1: longblob  # Other platforms
    p2: longblob
    p3: longblob
    p4: longblob
    p5: longblob
    p6: longblob
    b1: longblob  # Bridges
    b2: longblob
    b3: longblob
    b4: longblob
    b5: longblob
    b6: longblob
    b7: longblob
    b8: longblob
    b9: longblob
    b10: longblob
    b11: longblob
    b12: longblob
    b13: longblob
    b14: longblob
    """

    def _make_tuples(self, key):
        from Processing.rois_toolbox.get_maze_components import get_rois_from_templates

        # Get all possible components name
        nplatf, nbridges = 9, 14
        platforms = ['p'+str(i) for i in range(nplatf + 1)]
        bridges = ['b'+str(i) for i in range(nbridges + 1)]
        all_components = ['s', 't']
        all_components.extend(platforms)
        all_components.extend(bridges)

        # Get matched components for recording
        session = key['session_name']
        experiment = key['experiment_name']
        templates_fld = key['templates_folder']
        video = key['video_file_path']
        matched = get_rois_from_templates(session, video, templates_fld)

        # Prepare data to insert into the table
        data_to_input =  {(n if n in matched.keys() else n):(matched[n] if n in matched.keys() else 0)
                           for n in all_components}
        for k,v in data_to_input:
            key[k] = v

        # Insert
        self.insert1(key)

@schema
class Stimuli(dj.Computed):
    definition = """
    # Metadata of each trial (e.g. stim type and frame of onset)
    -> Recordings
    uid: varchar(128)  # uniquely identifuing ID for each trial YYMMDD_MOUSEID_RECNUM_TRIALNUM
    ---
    stim_type: varchar(128)
    stim_start: int   # number of frame at start of stim
    stim_duration: int   # duration in frames
    stim_metadata: longblob  # list of other stuff ? 
    """

    def _make_tuple(self, key):
        # TODO Mantis
        # TODO more metadata
        tdmspath = key['metadata_file_path']
        recording_uid = key['recording_uid']

         # Try to load a .tdms
        try:
            print('           ... loading metadata from .tdms: {}'.format(os.path.split(tdmspath)[-1]))
            tdms = TdmsFile(tdmspath)
        except FileNotFoundError:
            raise FileNotFoundError(' Could not load tdms file')

        # Get all stimuli in .tdms
        stimuli = {}
        for group in tdms.groups():
            for obj in tdms.group_channels(group):
                for idx in obj.as_dataframe().loc[0].index:
                    if 'stimulis' in str(obj).lower():
                        # Get stim type
                        if 'visual' in str(obj).lower():
                            stim_type = 'visual'
                            stim_duration = 5 * 30  # ! <-
                        elif 'audio' in str(obj).lower():
                            stim_type = 'audio'
                            stim_duration = 9 * 30  # ! <-


                        # Get stim frame
                        if '  ' in idx:
                            framen = int(idx.split('  ')[1].split('-')[0])
                        else:
                            framen = int(idx.split(' ')[2].split('-')[0])

                        stimuli[str(framen)] = stim_type

        # Insert entries in table
        for i, k in enumerate(sorted(stimuli.keys())):
            stim = stimuli[k]

            data_to_input = dict(
                uid=recording_uid + '_{}'.format(i),
                stim_type = stim_type,
                stim_start = int(framen),
                stim_duration = stim_duration,
                stim_metadata = 0  # ! <- 
            )
            self.insert1(data_to_input)


@schema
class TrackingData(dj.Computed):
    definition = """
    # Stores the DLC recording data for one Recording entry
    -> Recordings
    ---
    overview_camera_dataframe: varchar(256)  # path to dlc .h5 file
    mainview_camera_dataframe: varchar(256)  # path to dlc .h5 file
    top_mirror_dataframe: varchar(256)  # path to dlc .h5 file
    side_mirror_dataframe: varchar(256)  # path to dlc .h5 file

    """
    class OverView(dj.Part):
        definition = """
        # Tracking data from overview camera
        -> TrackingData
        """
        class LeftEar(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftEye(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Snout(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightEye(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightEar(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
        
        class Neck(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightShoulder(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightHip(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class TailBase(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Tail1(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
            
        class Tail2(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftHip(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftShoulder(dj.Part):
            definition = """
            # where the data are actually stored
            -> OverView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
    
    class MainView(dj.Part):
        definition = """
        # Tracking data from main camera
        -> TrackingData
        """
        class LeftEar(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftEye(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Snout(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightEye(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightEar(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
        
        class Neck(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightShoulder(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightHip(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class TailBase(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Tail1(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
            
        class Tail2(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftHip(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftShoulder(dj.Part):
            definition = """
            # where the data are actually stored
            -> MainView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Body(dj.Part):definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

    class TopView(dj.Part):
        definition = """
        # Tracking data from top-view mirror
        -> TrackingData
        """
        class LeftEar(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftEye(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Snout(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightEye(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightEar(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
        
        class Neck(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightShoulder(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightHip(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class TailBase(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Tail1(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
            
        class Tail2(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftHip(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftShoulder(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Body(dj.Part):
            definition = """
            # where the data are actually stored
            -> TopView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

    class SideView(dj.Part):
        definition = """
        # Tracking data (from DLC) for the side view mirror
        -> TrackingData
        """
        class LeftEar(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftEye(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Snout(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightEye(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightEar(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
        
        class Neck(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightShoulder(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class RightHip(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class TailBase(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Tail1(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """
            
        class Tail2(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftHip(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class LeftShoulder(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

        class Body(dj.Part):
            definition = """
            # where the data are actually stored
            -> SideView
            ---
            x: longblob
            y: longblob
            likelihood: longblob
            velocity: longblob
            maze_components: varchar(256)
            """

if __name__ == "__main__":
    import sys
    sys.path.append('./')
    from dj_config import start_connection
    start_connection()




